# All codes are my solutions, and they are not guaranteed to be correct 
# If you find errors and would like to discuss, please send email to koukourock@gmail.com 
# Some notes for discussion can be found at the bottom 
# Last edit: 2014-11-26



import timeit
import random


##### Code example from chapter #####
# for i in range(1000,100000,1000):
	# t = timeit.Timer('random.randrange(%d) in x' %i, 'from __main__ import random, x')
# 	x = list(range(i))
# 	lst_time = t.timeit(number=1000)

# 	x = {j:None for j in range(i)}
# 	d_time = t.timeit(number=1000)

# 	print ('%d, %10.3f, %10.2f' % (i, lst_time, d_time))



#### Exercise 1: Devise an experiment to verify that the list index operator is O(1) ####
for i in range(1000, 100000, 1000):
	t = timeit.Timer('x[(%d-500)]' %i, 'from __main__ import random, x')
	x = list(range(i))
	time = t.timeit(number = 1000)

	print ('%d, %10.7f' % (i, time))


#### Exercise 2: Devise an experiment to verify that get item and set itme are O(1) for dictionaries ####
# get
# for i in range(1000, 100000, 1000):
# 	t = timeit.Timer('x.get(%d)' %(i-10), 'from __main__ import x')
# 	x = {j:None for j in range(i)}
# 	time = t.timeit(number = 1000)

# 	print ('%d, %10.7f' % (i, time))

# set  -- Python dictionary does not have .set() method, instead I use x[i] to set the value
# for i in range(1000, 100000, 1000): 
	# t = timeit.Timer('x[%d] = 3' %(i-100), 'from __main__ import random,x')
# 	x = {j:None for j in range(i)}
# 	time = t.timeit(number = 1000)

# 	print ('%d, %10.7f' % (i, time))



#### Exercise 3: Devise an experiment that compares the performance of the del operator on lists and dictionaries
# for i in range(10000, 1000000, 10000):
# 	tl = timeit.Timer('del x[random.randrange(100)]' , 'from __main__ import random, x')
# 	x = list(range(i))
# 	ltime = tl.timeit(number = 10)

# 	x = {j:None for j in range(i)}
# 	td = timeit.Timer('del x[random.randrange(%d)]' %i, 'from __main__ import random, x') ###### Note 1 ######
# 	dtime = td.timeit(number = 10)

# 	print ('%d, %10.7f, %10.7f' % (i, ltime, dtime))



#### Exercise 4: Given a list of numbers in random order, write an algorithm that works in O(nlog(n)) to find the kth smallest number in the list ####
# for i in range(10000, 1000000, 10000):
# 	t = timeit.Timer('x[%d]' %(i/100), 'from __main__ import random, x')
# 	x = random.sample(range(i), i)
# 	x.sort()  						 # O(nlog(n))
# 	time = t.timeit(number = 1000)

# 	print ('%d, %10.7f' % (i, time))




#### Exercise 5: Can you improve the algorithm from the previous problem to be linear? Explain

# x = random.sample(range(1000), 100)
# small = []
# for i in x:
# 	if i <= small:
# 		small = i



# I dont know :(




# Note 1: This is a quick-and-dirty way to solve the problem. However there is a bug in the code: for dictionary, the del operation depends on the number generated by random.randrange(i), if two numbers happend to be the same, Python will throw a KeyError. Thus I set the timeit number relatively small (10) to avoid such error. 












